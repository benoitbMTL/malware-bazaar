import requests
import os
import pyzipper
from datetime import datetime

# Function to get user input with defaults and option to skip
def get_user_input():
    print("\nEnter a Malware Tag")
    print("Examples: ransomware, agenttesla, lokibot, hydra, mirai")
    print("Find more examples at https://bazaar.abuse.ch/browse/")
    tag = input("Enter tag or press enter to skip: ")

    print("\nEnter a File Type")
    print("Examples: exe, msi, pdf, dll, ps1, doc, xls, rar")
    file_type = input("Enter file type or press enter to skip: ")

    num_samples = input("\nEnter the number of samples to download (default: 1, max: 5): ") or "1"
    num_samples = min(int(num_samples), 5)  # Enforcing a maximum of 5 samples
    return tag, file_type, num_samples

# Function to fetch hashes from MalwareBazaar based on user input
def fetch_hashes(tag, file_type, num_samples):
    print(f"\nFetching data with tag: '{tag}', file type: '{file_type}', number of samples: {num_samples}")
    url = "https://mb-api.abuse.ch/api/v1/"
    post_data = {"limit": str(num_samples)}

    if tag and not file_type:
        post_data["query"] = "get_taginfo"
        post_data["tag"] = tag
    elif file_type and not tag:
        post_data["query"] = "get_file_type"
        post_data["file_type"] = file_type
    elif tag and file_type:
        post_data["query"] = "get_fileinfo"
        post_data["tag"] = tag
        post_data["file_type"] = file_type
    else:
        print("\nPlease provide a valid tag or file type.")
        return None

    response = requests.post(url, data=post_data)

    if response.status_code != 200 or 'data' not in response.json() or not response.json()['data']:
        print(f"\nCould not find malware sample for tag '{tag}' and file type '{file_type}'. Please try a different tag or file type.")
        return None

    data = response.json()['data']
    return [(item['sha256_hash'], item.get('tags', ['Unknown']), item['file_type_mime']) for item in data]

# Function to download and unzip files
def download_and_unzip(hashes):
    downloaded_files = []
    for hash_val, tags, file_type_mime in hashes:
        primary_tag = tags[0] if tags else "Unknown"
        file_type = file_type_mime.split('/')[-1]
        date = datetime.now().strftime("%Y-%m-%d")
        hash_part = hash_val[:6]
        new_filename = f"{primary_tag}_{file_type}_{date}_{hash_part}"

        print(f"\nDownloading file with SHA256 hash: {hash_val}")
        print(f"Tags: {tags}")

        post_data = {
            "query": "get_file",
            "sha256_hash": hash_val
        }
        response = requests.post("https://mb-api.abuse.ch/api/v1/", data=post_data)
        
        zip_filename = hash_val + ".zip"
        with open(zip_filename, 'wb') as file:
            file.write(response.content)
        print("Download complete. Unzipping file...")

        try:
            with pyzipper.AESZipFile(zip_filename) as zf:
                zf.pwd = b'infected'
                zf.extractall("Malwares")  # Changed folder name to 'Malwares'
                unzipped_file_names = zf.namelist()
                for uf in unzipped_file_names:
                    original_path = os.path.join("Malwares", uf)  # Changed folder name
                    new_path = os.path.join("Malwares", new_filename + os.path.splitext(uf)[-1])  # Changed folder name

                    counter = 1
                    while os.path.exists(new_path):
                        modified_new_filename = f"{new_filename}_{counter}"
                        new_path = os.path.join("Malwares", modified_new_filename + os.path.splitext(uf)[-1])  # Changed folder name
                        counter += 1
                    
                    os.rename(original_path, new_path)
                    downloaded_files.append(new_path)

            print(f"Unzipping and renaming to {new_filename} complete.")
        except Exception as e:
            print(f"Error unzipping file: {e}")

        os.remove(zip_filename)
        print("Zip file removed.")

    return downloaded_files

# Main function to handle user input until valid data is fetched
def main():
    tag, file_type, num_samples = get_user_input()
    hashes = fetch_hashes(tag, file_type, num_samples)
    while hashes is None:  # Loop until valid data is fetched
        tag, file_type, num_samples = get_user_input()
        hashes = fetch_hashes(tag, file_type, num_samples)
    
    if hashes:
        downloaded_files = download_and_unzip(hashes)
        print("\nDownloaded and unzipped the following files:")
        for file in downloaded_files:
            print(file)
    else:
        print("No files to download.")

if __name__ == "__main__":
    main()
